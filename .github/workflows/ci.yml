name: FastTD3 CI/CD

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        pytorch: [false, true]
        exclude:
          # macOS doesn't have gcc by default, use clang
          - os: macos-latest
            compiler: gcc
          # Skip PyTorch on some combinations to reduce CI time
          - os: macos-latest
            compiler: clang
            pytorch: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Compiler: ${{ matrix.compiler }}"
        echo "PyTorch: ${{ matrix.pytorch }}"
        echo "CXX: ${{ matrix.compiler }}++"

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libeigen3-dev \
          libspdlog-dev \
          nlohmann-json3-dev \
          libgtest-dev \
          libgmock-dev \
          pkg-config \
          git
        
        # Verify Eigen3 installation
        echo "Verifying Eigen3 installation..."
        ls -la /usr/include/eigen3/ || echo "Eigen3 not found in /usr/include/eigen3/"
        find /usr -name "Eigen" -type d 2>/dev/null | head -5 || echo "No Eigen directories found"
        pkg-config --exists eigen3 && echo "Eigen3 found via pkg-config" || echo "Eigen3 not found via pkg-config"
        
        # Additional debugging
        echo "Checking for Eigen3 files:"
        find /usr -name "*eigen*" -type f 2>/dev/null | head -10 || echo "No eigen files found"
        echo "Checking include directories:"
        ls -la /usr/include/ | grep -i eigen || echo "No eigen in /usr/include/"
        echo "Checking lib directories:"
        ls -la /usr/lib/ | grep -i eigen || echo "No eigen in /usr/lib/"
        
        # Ensure Eigen3 directory structure exists
        echo "Setting up Eigen3 directory structure..."
        sudo mkdir -p /usr/include/eigen3
        if [ ! -f /usr/include/eigen3/Eigen ]; then
          echo "Creating Eigen3 symlink if needed..."
          sudo ln -sf /usr/include/eigen3 /usr/include/Eigen || echo "Symlink creation failed"
        fi
        echo "Final Eigen3 check:"
        ls -la /usr/include/eigen3/ || echo "Still no eigen3 directory"
        
        # Fallback: Install Eigen3 from source if needed
        if [ ! -f /usr/include/eigen3/Eigen/Dense ]; then
          echo "Installing Eigen3 from source..."
          cd /tmp
          wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz
          tar -xzf eigen-3.4.0.tar.gz
          sudo cp -r eigen-3.4.0/Eigen /usr/include/eigen3/
          sudo cp eigen-3.4.0/signature_of_eigen3_matrix_library /usr/include/eigen3/
          cd -
          echo "Eigen3 installed from source"
        fi
        
        # Verify spdlog installation
        echo "Verifying spdlog installation..."
        ls -la /usr/include/spdlog/ || echo "spdlog not found in /usr/include/spdlog/"
        find /usr -name "spdlog" -type d 2>/dev/null | head -5 || echo "No spdlog directories found"
        pkg-config --exists spdlog && echo "spdlog found via pkg-config" || echo "spdlog not found via pkg-config"
        
        # Additional spdlog debugging
        echo "Checking for spdlog files:"
        find /usr -name "*spdlog*" -type f 2>/dev/null | head -10 || echo "No spdlog files found"
        echo "Checking spdlog libraries:"
        ls -la /usr/lib/ | grep -i spdlog || echo "No spdlog in /usr/lib/"
        
        # Verify GTest installation
        echo "Verifying GTest installation..."
        ls -la /usr/include/gtest/ || echo "gtest not found in /usr/include/gtest/"
        ls -la /usr/include/gmock/ || echo "gmock not found in /usr/include/gmock/"
        find /usr -name "*gtest*" -type f 2>/dev/null | head -5 || echo "No gtest files found"
        find /usr -name "*gmock*" -type f 2>/dev/null | head -5 || echo "No gmock files found"
        
        # Verify nlohmann-json installation
        echo "Verifying nlohmann-json installation..."
        ls -la /usr/include/nlohmann/ || echo "nlohmann not found in /usr/include/nlohmann/"
        find /usr -name "*nlohmann*" -type f 2>/dev/null | head -5 || echo "No nlohmann files found"

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install \
          cmake \
          eigen \
          spdlog \
          nlohmann-json \
          googletest \
          cli11
        
        # Verify installations
        echo "=== Verifying installations on macOS ==="
        echo "Eigen3:"
        ls -la /opt/homebrew/include/eigen3/ || echo "Eigen3 not found in Homebrew"
        echo "spdlog:"
        ls -la /opt/homebrew/include/spdlog/ || echo "spdlog not found in Homebrew"
        echo "GTest:"
        ls -la /opt/homebrew/include/gtest/ || echo "gtest not found in Homebrew"
        ls -la /opt/homebrew/include/gmock/ || echo "gmock not found in Homebrew"
        echo "nlohmann-json:"
        ls -la /opt/homebrew/include/nlohmann/ || echo "nlohmann not found in Homebrew"
        
        # Check pkg-config
        echo "=== pkg-config checks ==="
        pkg-config --exists eigen3 && echo "Eigen3 found via pkg-config" || echo "Eigen3 not found via pkg-config"
        pkg-config --exists spdlog && echo "spdlog found via pkg-config" || echo "spdlog not found via pkg-config"
        pkg-config --exists gtest && echo "gtest found via pkg-config" || echo "gtest not found via pkg-config"
        pkg-config --exists nlohmann_json && echo "nlohmann_json found via pkg-config" || echo "nlohmann_json not found via pkg-config"

    - name: Install PyTorch (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.pytorch == 'true'
      run: |
        # Install PyTorch via pip for CI
        python3 -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Install PyTorch (macOS)
      if: matrix.os == 'macos-latest' && matrix.pytorch == 'true'
      run: |
        # Install PyTorch via pip for CI
        python3 -m pip install torch torchvision torchaudio

    - name: Setup compiler (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi

    - name: Setup compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Create build directory
      run: mkdir -p build

    - name: Configure with CMake
      working-directory: build
      run: |
        # Set Eigen3 path explicitly for CI
        export EIGEN3_INCLUDE_DIR=/usr/include/eigen3
        export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/include/eigen3
        
        if [ "${{ matrix.pytorch }}" = "true" ]; then
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3 \
            -DCMAKE_PREFIX_PATH=$(python3 -c 'import torch; print(torch.utils.cmake_prefix_path)')
        else
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3
        fi
        
        echo "=== CMake configuration complete ==="
        echo "Available targets:"
        cmake --build . --target help || echo "Could not list targets"
        echo "CMake cache contents:"
        cat CMakeCache.txt | grep -E "(CMAKE|EIGEN|SPDLOG|GTEST)" || echo "No relevant cache entries found"

    - name: Build project
      working-directory: build
      run: make -j$(nproc)

    - name: List build artifacts
      working-directory: build
      run: |
        echo "=== Build artifacts ==="
        ls -la
        echo "=== Test executables ==="
        find . -name "*test*" -type f -executable || echo "No test executables found"
        echo "=== All executables ==="
        find . -type f -executable || echo "No executables found"

    - name: Run tests
      working-directory: build
      run: |
        # Check if test executable exists
        if [ -f "./tests_simple" ]; then
          echo "Test executable found, running tests..."
          ./tests_simple --gtest_output=xml:test_results.xml
          ./tests_simple --gtest_verbose
        else
          echo "ERROR: tests_simple executable not found!"
          echo "Available files:"
          ls -la
          echo "Trying to build tests explicitly..."
          make tests_simple || echo "Failed to build tests_simple"
          ls -la tests_simple || echo "tests_simple still not found after explicit build"
          exit 1
        fi

    - name: Test simple executable
      working-directory: build
      run: |
        # Test that the simple executable can be run with help
        ./fast_td3_simple --help || true
        # Test with minimal parameters
        timeout 10s ./fast_td3_simple --max-steps 10 --batch-size 32 || true

    - name: Test PyTorch executable
      if: matrix.pytorch == 'true'
      working-directory: build
      run: |
        # Test that the PyTorch executable can be run with help
        ./fast_td3_pytorch --help || true
        # Test with minimal parameters (CPU only)
        timeout 10s ./fast_td3_pytorch --max-steps 10 --batch-size 32 || true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}-pytorch-${{ matrix.pytorch }}
        path: build/test_results.xml
        retention-days: 7

    - name: Build summary
      run: |
        echo "✅ Build completed successfully on ${{ matrix.os }} with ${{ matrix.compiler }} (PyTorch: ${{ matrix.pytorch }})"
        echo "📦 Executables created:"
        ls -la build/*_simple || echo "No simple executables found"
        ls -la build/*_pytorch || echo "No PyTorch executables found"
        echo "🧪 Test results:"
        if [ -f build/test_results.xml ]; then
          echo "Test results XML generated"
        else
          echo "No test results XML found"
        fi

    - name: Install CLI11 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Try to install CLI11 from package manager first
        if sudo apt-get install -y libcli11-dev 2>/dev/null; then
          echo "CLI11 installed from package manager"
        else
          # Install CLI11 from source if not available in package manager
          echo "Installing CLI11 from source..."
          git clone https://github.com/CLIUtils/CLI11.git
          cd CLI11
          mkdir build && cd build
          cmake .. -DCLI11_BUILD_EXAMPLES=OFF -DCLI11_BUILD_DOCS=OFF -DCLI11_BUILD_TESTS=OFF
          make -j$(nproc)
          sudo make install
          cd ../..
          echo "CLI11 installed from source"
        fi

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libeigen3-dev \
          libspdlog-dev \
          nlohmann-json3-dev \
          libgtest-dev \
          clang-tidy \
          git

    - name: Create build directory
      run: mkdir -p build

    - name: Configure with CMake
      working-directory: build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_CXX_STANDARD_REQUIRED=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      working-directory: build
      run: |
        # Run clang-tidy on source files
        find ../src -name "*.cpp" -exec clang-tidy {} -- -I../include \;
        find ../tests -name "*.cpp" -exec clang-tidy {} -- -I../include \;

    - name: Check file structure
      run: |
        echo "📁 Project structure check:"
        echo "Source files:"
        find src -name "*.cpp" | wc -l
        echo "Header files:"
        find include -name "*.hpp" | wc -l
        echo "Test files:"
        find tests -name "*.cpp" | wc -l
        echo "CMake files:"
        find . -name "CMakeLists.txt" | wc -l

    - name: Install CLI11
      run: |
        # Try to install CLI11 from package manager first
        if sudo apt-get install -y libcli11-dev 2>/dev/null; then
          echo "CLI11 installed from package manager"
        else
          # Install CLI11 from source if not available in package manager
          echo "Installing CLI11 from source..."
          git clone https://github.com/CLIUtils/CLI11.git
          cd CLI11
          mkdir build && cd build
          cmake .. -DCLI11_BUILD_EXAMPLES=OFF -DCLI11_BUILD_DOCS=OFF -DCLI11_BUILD_TESTS=OFF
          make -j$(nproc)
          sudo make install
          cd ../..
          echo "CLI11 installed from source"
        fi